{"ast":null,"code":"var _jsxFileName = \"/home/fayser/henry/FT-M2/09-React-Routing/homework/src/containers/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport { Route } from 'react-router-dom';\nimport About from '../components/About.jsx';\nimport Ciudad from '../components/Ciudad';\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n\n        if (!cities.some(city => city.id === ciudad.id)) {\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"The city is Ready\");\n        }\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id == parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(Nav, {\n      onSearch: onSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 38\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(Cards, {\n      cities: cities,\n      onClose: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/about\",\n    component: About,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/ciudad/:ciudadId\",\n    render: ({\n      match\n    }) => /*#__PURE__*/React.createElement(Ciudad, {\n      city: onFilter(match.params.ciudadId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 66\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/fayser/henry/FT-M2/09-React-Routing/homework/src/containers/App.js"],"names":["React","useState","Nav","Cards","Route","About","Ciudad","apiKey","App","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","some","city","alert","onFilter","ciudadId","parseInt","length","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport {Route} from 'react-router-dom';\nimport About from '../components/About.jsx';\nimport Ciudad from '../components/Ciudad';\n\n\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n  }\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          if(!cities.some(city => city.id === ciudad.id)) {\n            setCities(oldCities => [...oldCities, ciudad]);\n          } else {\n            alert(\"The city is Ready\");\n          }   \n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n  }\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id == parseInt(ciudadId));\n    if(ciudad.length > 0) {\n        return ciudad[0];\n    } else {\n        return null;\n    }\n  }\n  return (\n    <div className=\"App\">\n      <Route  path=\"/\" render={() => <Nav onSearch={onSearch}/>} /> \n      <Route exact path=\"/\"\n          render={() => <Cards\n          cities={cities}\n          onClose={onClose}\n      />}/>   \n      <Route path='/about' component={About}/>    \n      <Route exact path='/ciudad/:ciudadId' render={({match}) => <Ciudad city={onFilter(match.params.ciudadId)}/>} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}